version: '3.8'

services:
  # Database Services
  postgres:
    image: postgres:15
    container_name: cocoindex-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: cocoindex
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cocoindex-network

  redis:
    image: redis:7-alpine
    container_name: cocoindex-redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cocoindex-network

  neo4j:
    image: neo4j:5
    container_name: cocoindex-neo4j
    environment:
      NEO4J_AUTH: neo4j/password123
      NEO4J_dbms_memory_pagecache_size: 512M
      NEO4J_dbms_memory_heap_max__size: 512M
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j_data:/data
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:7474 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cocoindex-network

  qdrant:
    image: qdrant/qdrant
    container_name: cocoindex-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__LOG_LEVEL: INFO
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:6333/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cocoindex-network

  # Application Services
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: cocoindex-backend
    environment:
      # Database connections
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/cocoindex
      REDIS_URL: redis://redis:6379
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USERNAME: neo4j
      NEO4J_PASSWORD: password123
      QDRANT_URL: http://qdrant:6333
      
      # API Keys (from .env file)
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_KEY: ${SUPABASE_KEY}
      NOTION_API_KEY: ${NOTION_API_KEY}
      LLAMAPARSE_API_KEY: ${LLAMAPARSE_API_KEY}
      
      # Application settings
      ENVIRONMENT: production
      LOG_LEVEL: info
      CORS_ORIGINS: http://localhost:3000,http://frontend
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    volumes:
      - ./app:/app/app
      - ./python:/app/python
      - ./data:/app/data
    networks:
      - cocoindex-network
    restart: unless-stopped

  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: cocoindex-celery
    command: celery -A app.tasks worker --loglevel=info --concurrency=4
    environment:
      # Same environment as backend
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/cocoindex
      REDIS_URL: redis://redis:6379
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USERNAME: neo4j
      NEO4J_PASSWORD: password123
      QDRANT_URL: http://qdrant:6333
      
      # API Keys
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_KEY: ${SUPABASE_KEY}
      NOTION_API_KEY: ${NOTION_API_KEY}
      LLAMAPARSE_API_KEY: ${LLAMAPARSE_API_KEY}
    depends_on:
      - redis
      - postgres
      - backend
    volumes:
      - ./app:/app/app
      - ./python:/app/python
      - ./data:/app/data
    networks:
      - cocoindex-network
    restart: unless-stopped

  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: cocoindex-celery-beat
    command: celery -A app.tasks beat --loglevel=info
    environment:
      REDIS_URL: redis://redis:6379
    depends_on:
      - redis
      - celery-worker
    volumes:
      - ./app:/app/app
    networks:
      - cocoindex-network
    restart: unless-stopped

  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: cocoindex-frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    environment:
      VITE_API_URL: http://localhost:8001
    networks:
      - cocoindex-network
    restart: unless-stopped

volumes:
  postgres_data:
  neo4j_data:
  qdrant_data:

networks:
  cocoindex-network:
    driver: bridge